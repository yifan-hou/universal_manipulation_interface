name: flip_up

# rgb vs. low_dim: raw data are either rgb images or low_dim vectors. frames are aligned within each type.
# obs vs. action: obs data are used as policy input; action are used as labels for policy output.
# dense vs. sparse: used for dense prediction vs. sparse prediction

# down_sample_steps: how many steps to skip in the raw data for the given usage
# horizon: how many steps to look ahead(action) or back(obs) after downsample for the given usage
sparse_obs_rgb_down_sample_steps: 10
sparse_obs_rgb_horizon: 1

sparse_obs_low_dim_down_sample_steps: 1
sparse_obs_low_dim_horizon: 2

sparse_action_down_sample_steps: 10
sparse_action_horizon: 16

# optional
dense_obs_low_dim_down_sample_steps: 1
dense_obs_low_dim_horizon: 2

dense_action_down_sample_steps: 1
dense_action_horizon: 3

shape_meta: &shape_meta
  # acceptable types: rgb, low_dim
  # fields under raw and obs must be consistent with FlipUpDataset.raw_to_obs_action()
  raw: # describes what exists in data
    camera1_rgb:
      shape: [3, 224, 224]
      type: rgb
    camera2_rgb:
      shape: [3, 224, 224]
      type: rgb
    ts_pose_fb:
      shape: [7]
      type: low_dim
    ts_pose_command:
      shape: [7]
      type: low_dim
    wrench:
      shape: [6]
      type: low_dim
  obs: # describes observations loaded to memory 
      camera1_rgb:
        shape: [3, 224, 224]
        type: rgb
      camera2_rgb:
        shape: [3, 224, 224]
        type: rgb
      robot0_eef_pos:
        shape: [3]
        type: low_dim
      robot0_eef_rot_axis_angle: # exists in data
        shape: [6]
        type: low_dim
        rotation_rep: rotation_6d
      robot0_eef_wrench:
        shape: [6]
        type: low_dim
  action: # describes actions loaded to memory, computed from robot command
    shape: [9]
    rotation_rep: rotation_6d
  sample: # describes samples used in a batch
          # keys here must exist in obs/action above.
          # shape, type and rotation_rep are inherited from obs/action above.
    obs:
      sparse:
        camera1_rgb:
          horizon: ${task.sparse_obs_rgb_horizon} # int
          down_sample_steps: ${task.sparse_obs_rgb_down_sample_steps} # int
        camera2_rgb:
          horizon: ${task.sparse_obs_rgb_horizon} # int
          down_sample_steps: ${task.sparse_obs_rgb_down_sample_steps} # int
        robot0_eef_pos:
          horizon: ${task.sparse_obs_low_dim_horizon} # int
          down_sample_steps: ${task.sparse_obs_low_dim_down_sample_steps} # float
        robot0_eef_rot_axis_angle: # exists in data
          horizon: ${task.sparse_obs_low_dim_horizon} # int
          down_sample_steps: ${task.sparse_obs_low_dim_down_sample_steps} # float
        robot0_eef_wrench:
          horizon: ${task.sparse_obs_low_dim_horizon} # int
          down_sample_steps: ${task.sparse_obs_low_dim_down_sample_steps} # float
      dense:
        robot0_eef_pos:
          horizon: ${task.dense_obs_low_dim_horizon} # int
          down_sample_steps: ${task.dense_obs_low_dim_down_sample_steps} # float
        robot0_eef_rot_axis_angle: # exists in data
          horizon: ${task.dense_obs_low_dim_horizon} # int
          down_sample_steps: ${task.dense_obs_low_dim_down_sample_steps} # float
        robot0_eef_wrench:
          horizon: ${task.dense_obs_low_dim_horizon} # int
          down_sample_steps: ${task.dense_obs_low_dim_down_sample_steps} # float
    action:
      sparse:
        horizon: ${task.sparse_action_horizon}
        down_sample_steps: ${task.sparse_action_down_sample_steps} # int
      dense:
        horizon: ${task.dense_action_horizon}
        down_sample_steps: ${task.dense_action_down_sample_steps} # int


task_name: &task_name flipup
dataset_path: /home/yifanhou/data/flip_up_500_filtered

env_runner: # used in workspace for computing metrics
  _target_: diffusion_policy.env_runner.real_pusht_image_runner.RealPushTImageRunner

dataset:
  _target_: diffusion_policy.dataset.flip_up_dataset.FlipUpDataset
  shape_meta: *shape_meta
  dataset_path: ${task.dataset_path}
  sparse_query_frequency_down_sample_steps: 8
  dense_query_frequency_down_sample_steps: 1
  # cache_dir: null
  action_padding: False
  temporally_independent_normalization: False
  seed: 42
  val_ratio: 0.05
